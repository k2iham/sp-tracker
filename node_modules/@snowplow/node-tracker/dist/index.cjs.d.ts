/*
* Copyright (c) 2022 Snowplow Analytics Ltd
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
* 1. Redistributions of source code must retain the above copyright notice, this
*    list of conditions and the following disclaimer.
*
* 2. Redistributions in binary form must reproduce the above copyright notice,
*    this list of conditions and the following disclaimer in the documentation
*    and/or other materials provided with the distribution.
*
* 3. Neither the name of the copyright holder nor the names of its
*    contributors may be used to endorse or promote products derived from
*    this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
* DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
* FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
* CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
import { Payload, TrackerCore } from "@snowplow/tracker-core";
import { Response, RequestError, Agents, RequiredRetryOptions, ToughCookieJar, PromiseCookieJar } from "got";
interface Emitter {
    flush: () => void;
    input: (payload: Payload) => void;
}
declare enum HttpProtocol {
    HTTP = "http",
    HTTPS = "https"
}
declare enum HttpMethod {
    GET = "get",
    POST = "post"
}
/**
 * Create an emitter object, which uses the `got` library, that will send events to a collector
 *
 * @param endpoint - The collector to which events will be sent
 * @param protocol - http or https
 * @param port - The port for requests to use
 * @param method - get or post
 * @param bufferSize - Number of events which can be queued before flush is called
 * @param retry - Configure the retry policy for `got` - https://github.com/sindresorhus/got/blob/v11.5.2/readme.md#retry
 * @param cookieJar - Add a cookieJar to `got` - https://github.com/sindresorhus/got/blob/v11.5.2/readme.md#cookiejar
 * @param callback - Callback called after a `got` request following retries - called with ErrorRequest (https://github.com/sindresorhus/got/blob/v11.5.2/readme.md#errors) and Response (https://github.com/sindresorhus/got/blob/v11.5.2/readme.md#response)
 * @param agents - Set new http.Agent and https.Agent objects on `got` requests - https://github.com/sindresorhus/got/blob/v11.5.2/readme.md#agent
 */
declare function gotEmitter(endpoint: string, protocol?: HttpProtocol, port?: number, method?: HttpMethod, bufferSize?: number, retry?: number | Partial<RequiredRetryOptions>, cookieJar?: PromiseCookieJar | ToughCookieJar, callback?: (error?: RequestError, response?: Response<string>) => void, agents?: Agents): Emitter;
interface Tracker extends TrackerCore {
    /**
     * Set the domain user ID
     *
     * @param userId - The domain user id
     */
    setDomainUserId: (userId: string) => void;
    /**
     * Set the network user ID
     *
     * @param userId - The network user id
     */
    setNetworkUserId: (userId: string) => void;
}
/**
 * Snowplow Node.js Tracker
 *
 * @param string - or array emitters The emitter or emitters to which events will be sent
 * @param string - namespace The namespace of the tracker
 * @param string - appId The application ID
 * @param boolean - encodeBase64 Whether unstructured events and custom contexts should be base 64 encoded
 */
declare function tracker(emitters: Emitter | Array<Emitter>, namespace: string, appId: string, encodeBase64: boolean): Tracker;
export { Emitter, HttpMethod, HttpProtocol, gotEmitter, tracker, Tracker };
export { version, buildAdClick, buildAdConversion, buildAdImpression, buildAddToCart, buildConsentGranted, buildConsentWithdrawn, buildEcommerceTransaction, buildEcommerceTransactionItem, buildFormFocusOrChange, buildFormSubmission, buildLinkClick, buildPagePing, buildPageView, buildRemoveFromCart, buildScreenView, buildSelfDescribingEvent, buildSiteSearch, buildSocialInteraction, buildStructEvent, AdClickEvent, ContextEvent, PagePingEvent, PageViewEvent, AddToCartEvent, LinkClickEvent, ScreenViewEvent, SiteSearchEvent, StructuredEvent, AdConversionEvent, AdImpressionEvent, ConsentGrantedEvent, FormSubmissionEvent, RemoveFromCartEvent, SelfDescribingEvent, ConsentWithdrawnEvent, FormFocusOrChangeEvent, SocialInteractionEvent, EcommerceTransactionEvent, EcommerceTransactionItemEvent, SelfDescribingJson, Timestamp, PayloadBuilder, Payload, CorePlugin, CoreConfiguration, ContextGenerator, ContextFilter } from '@snowplow/tracker-core';
